import * as csv from 'fast-csv'
import { createReadStream, existsSync, mkdirSync, readdirSync, unlinkSync, writeFileSync } from 'fs'
import { join } from 'path'

type BaseTypeRow = {
  Class?: string
  BaseType?: string
  DropLevel?: string
  Rarity?: string
  Height?: string
  Width?: string
  Sockets?: string
  Quality?: string
  Corrupted?: string
  'SubGroup A'?: string
  'SubGroup B'?: string
  'SubGroup Tier'?: string
  'Game:Strength'?: string
  'Game:Dexterity'?: string
  'Game:Intelligence'?: string
  'Game:Damage From'?: string
  'Game:Damage To'?: string
  'Game:APS'?: string
  'Game:DPS'?: string
  'Game:Crit'?: string
  'Game:Implicit 1'?: string
  'Game:Implicit 2'?: string
  'Game:Armour'?: string
  'Game:Armour Max'?: string
  'Game:Evasion'?: string
  'Game:Evasion Max'?: string
  'Game:Energy Shield'?: string
  'Game:Energy Shield Max'?: string
  'Game:Block'?: string
}

export async function parseBaseTypes() {
  const baseTypesRaw: BaseTypeRow[] = []

  const itemClasses: Record<string, string[]> = {}

  createReadStream(join(__dirname, '../assets/basetypes.csv'))
    .pipe(csv.parse({ headers: true }))
    .on('data', (row) => {
      baseTypesRaw.push(row as BaseTypeRow)
    })
    .on('error', () => console.log('Error wile trying to generate types'))
    .on('end', () => {
      for (const row of baseTypesRaw) {
        if (!itemClasses[row.Class]) {
          itemClasses[row.Class] = []
        }

        itemClasses[row.Class].push(row.BaseType)
      }

      // Generate path if not already there, delete all files if they exist
      if (!existsSync(join(__dirname, '../types/autogenerated'))) {
        mkdirSync(join(__dirname, '../types/autogenerated'))
      } else {
        const files = readdirSync(join(__dirname, '../types/autogenerated'))
        for (const file of files) {
          unlinkSync(join(__dirname, '../types/autogenerated', file))
        }
      }

      // Generate item classes typescript type
      const itemClassesFile = `export type ItemClasses = ${Object.keys(itemClasses)
        .map((i) => `"${i}"`)
        .join(' | ')} | (string & {})`

      writeFileSync(join(__dirname, '../types/autogenerated/ItemClasses.ts'), itemClassesFile)

      // For each item class, generate a typescript type of the base types in that class
      for (const [itemClass, baseTypes] of Object.entries(itemClasses)) {
        const name = itemClass.replace(/\s/gim, '')
        const file = `export type ${name} = ${baseTypes.map((i) => `"${i}"`).join(' | ')} | (string & {})`

        writeFileSync(join(__dirname, `../types/autogenerated/${name}.ts`), file)
      }

      // Create an index file that exports all of those
      const indexFile =
        "export * from './ItemClasses'\n" +
        Object.keys(itemClasses)
          .map((i) => `export * from './${i.replace(/\s/gim, '')}'`)
          .join('\n')

      writeFileSync(join(__dirname, '../types/autogenerated/index.ts'), indexFile)
    })
}

parseBaseTypes()
